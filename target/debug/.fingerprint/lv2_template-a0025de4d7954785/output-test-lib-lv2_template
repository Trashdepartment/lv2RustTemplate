{"$message_type":"diagnostic","message":"operator precedence might not be obvious","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"src/dsp.rs","byte_start":413,"byte_end":467,"line_start":14,"line_end":14,"column_start":24,"column_end":78,"is_primary":true,"text":[{"text":"    let mut an_voice = var(input) >> adsr_live(0.2, 0.1, 0.5, 0.8) * my_synth >> (pass() ^ pass());","highlight_start":24,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::precedence)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"src/dsp.rs","byte_start":413,"byte_end":467,"line_start":14,"line_end":14,"column_start":24,"column_end":78,"is_primary":true,"text":[{"text":"    let mut an_voice = var(input) >> adsr_live(0.2, 0.1, 0.5, 0.8) * my_synth >> (pass() ^ pass());","highlight_start":24,"highlight_end":78}],"label":null,"suggested_replacement":"var(input) >> (adsr_live(0.2, 0.1, 0.5, 0.8) * my_synth)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence might not be obvious\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dsp.rs:14:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut an_voice = var(input) >> adsr_live(0.2, 0.1, 0.5, 0.8) * my_synth >> (pass() ^ pass());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `var(input) >> (adsr_live(0.2, 0.1, 0.5, 0.8) * my_synth)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::precedence)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/dsp.rs","byte_start":398,"byte_end":410,"line_start":14,"line_end":14,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    let mut an_voice = var(input) >> adsr_live(0.2, 0.1, 0.5, 0.8) * my_synth >> (pass() ^ pass());","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/dsp.rs","byte_start":398,"byte_end":402,"line_start":14,"line_end":14,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut an_voice = var(input) >> adsr_live(0.2, 0.1, 0.5, 0.8) * my_synth >> (pass() ^ pass());","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dsp.rs:14:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut an_voice = var(input) >> adsr_live(0.2, 0.1, 0.5, 0.8) * my_synth >> (pass() ^ pass());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/dsp.rs","byte_start":682,"byte_end":693,"line_start":20,"line_end":20,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"    let mut default = constant(0.0) >> (pass() ^ pass());","highlight_start":9,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/dsp.rs","byte_start":682,"byte_end":686,"line_start":20,"line_end":20,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut default = constant(0.0) >> (pass() ^ pass());","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dsp.rs:20:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut default = constant(0.0) >> (pass() ^ pass());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `offset` is assigned to, but never used","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":3422,"byte_end":3428,"line_start":104,"line_end":104,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"        let mut offset: usize = 0;","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using `_offset` instead","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `offset` is assigned to, but never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:104:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut offset: usize = 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `_offset` instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `program` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":1287,"byte_end":1295,"line_start":39,"line_end":39,"column_start":12,"column_end":20,"is_primary":false,"text":[{"text":"pub struct Midigate {","highlight_start":12,"highlight_end":20}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":1360,"byte_end":1367,"line_start":42,"line_end":42,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    program: u8,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `program` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:42:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Midigate {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    program: u8,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unneeded `return` statement","code":{"code":"clippy::needless_return","explanation":null},"level":"warning","spans":[{"file_name":"src/dsp.rs","byte_start":194,"byte_end":207,"line_start":7,"line_end":7,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"        return result;","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::needless_return)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove `return`","code":null,"level":"help","spans":[{"file_name":"src/dsp.rs","byte_start":194,"byte_end":207,"line_start":7,"line_end":7,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"        return result;","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":"result","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/dsp.rs","byte_start":207,"byte_end":208,"line_start":7,"line_end":7,"column_start":22,"column_end":23,"is_primary":true,"text":[{"text":"        return result;","highlight_start":22,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unneeded `return` statement\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dsp.rs:7:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        return result;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::needless_return)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove `return`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;9mreturn result;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mresult\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the variable `offset` is used as a loop counter","code":{"code":"clippy::explicit_counter_loop","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":3595,"byte_end":3710,"line_start":110,"line_end":111,"column_start":9,"column_end":87,"is_primary":true,"text":[{"text":"        for (left_out, right_out) in","highlight_start":9,"highlight_end":37},{"text":"            Iterator::zip(ports.left_output.iter_mut(), ports.right_output.iter_mut())","highlight_start":1,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":3595,"byte_end":4384,"line_start":110,"line_end":127,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        for (left_out, right_out) in","highlight_start":9,"highlight_end":37},{"text":"            Iterator::zip(ports.left_output.iter_mut(), ports.right_output.iter_mut())","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            offset += 1;","highlight_start":1,"highlight_end":25},{"text":"            let (timestamp, message) = match midi_sequence.next() {","highlight_start":1,"highlight_end":68},{"text":"                Some((t, m)) => (t.as_frames(), m.read(self.urids.midi.wmidi, ())),","highlight_start":1,"highlight_end":84},{"text":"                _ => (None, None),","highlight_start":1,"highlight_end":35},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            match (timestamp, message) {","highlight_start":1,"highlight_end":41},{"text":"                (Some(_t), Some(m)) => match m {","highlight_start":1,"highlight_end":49},{"text":"                    MidiMessage::NoteOn(_, note, _velocity) => self.on_note(note as usize),","highlight_start":1,"highlight_end":92},{"text":"                    MidiMessage::NoteOff(_, note, _) => self.off_note(note.into()),","highlight_start":1,"highlight_end":84},{"text":"                    _ => (),","highlight_start":1,"highlight_end":29},{"text":"                }, // Wtf is an idiomatic rust?","highlight_start":1,"highlight_end":48},{"text":"                _ => (),","highlight_start":1,"highlight_end":25},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            self.tick(left_out, right_out);","highlight_start":1,"highlight_end":44},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::explicit_counter_loop)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":3595,"byte_end":3710,"line_start":110,"line_end":111,"column_start":9,"column_end":87,"is_primary":true,"text":[{"text":"        for (left_out, right_out) in","highlight_start":9,"highlight_end":37},{"text":"            Iterator::zip(ports.left_output.iter_mut(), ports.right_output.iter_mut())","highlight_start":1,"highlight_end":87}],"label":null,"suggested_replacement":"for (offset, (left_out, right_out)) in Iterator::zip(ports.left_output.iter_mut(), ports.right_output.iter_mut()).enumerate()","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/lib.rs","byte_start":3595,"byte_end":4384,"line_start":110,"line_end":127,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        for (left_out, right_out) in","highlight_start":9,"highlight_end":37},{"text":"            Iterator::zip(ports.left_output.iter_mut(), ports.right_output.iter_mut())","highlight_start":1,"highlight_end":87},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            offset += 1;","highlight_start":1,"highlight_end":25},{"text":"            let (timestamp, message) = match midi_sequence.next() {","highlight_start":1,"highlight_end":68},{"text":"                Some((t, m)) => (t.as_frames(), m.read(self.urids.midi.wmidi, ())),","highlight_start":1,"highlight_end":84},{"text":"                _ => (None, None),","highlight_start":1,"highlight_end":35},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            match (timestamp, message) {","highlight_start":1,"highlight_end":41},{"text":"                (Some(_t), Some(m)) => match m {","highlight_start":1,"highlight_end":49},{"text":"                    MidiMessage::NoteOn(_, note, _velocity) => self.on_note(note as usize),","highlight_start":1,"highlight_end":92},{"text":"                    MidiMessage::NoteOff(_, note, _) => self.off_note(note.into()),","highlight_start":1,"highlight_end":84},{"text":"                    _ => (),","highlight_start":1,"highlight_end":29},{"text":"                }, // Wtf is an idiomatic rust?","highlight_start":1,"highlight_end":48},{"text":"                _ => (),","highlight_start":1,"highlight_end":25},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            self.tick(left_out, right_out);","highlight_start":1,"highlight_end":44},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the variable `offset` is used as a loop counter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:110:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for (left_out, right_out) in\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Iterator::zip(ports.left_output.iter_mut(), ports.right_output.iter_mut())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|______________________________________________________________________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider using: `for (offset, (left_out, right_out)) in Iterator::zip(ports.left_output.iter_mut(), ports.right_output.iter_mut()).enumerate()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::explicit_counter_loop)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`","code":{"code":"clippy::single_match","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":3960,"byte_end":4329,"line_start":118,"line_end":125,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            match (timestamp, message) {","highlight_start":13,"highlight_end":41},{"text":"                (Some(_t), Some(m)) => match m {","highlight_start":1,"highlight_end":49},{"text":"                    MidiMessage::NoteOn(_, note, _velocity) => self.on_note(note as usize),","highlight_start":1,"highlight_end":92},{"text":"                    MidiMessage::NoteOff(_, note, _) => self.off_note(note.into()),","highlight_start":1,"highlight_end":84},{"text":"                    _ => (),","highlight_start":1,"highlight_end":29},{"text":"                }, // Wtf is an idiomatic rust?","highlight_start":1,"highlight_end":48},{"text":"                _ => (),","highlight_start":1,"highlight_end":25},{"text":"            };","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you might want to preserve the comments from inside the `match`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::single_match)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":3960,"byte_end":4329,"line_start":118,"line_end":125,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            match (timestamp, message) {","highlight_start":13,"highlight_end":41},{"text":"                (Some(_t), Some(m)) => match m {","highlight_start":1,"highlight_end":49},{"text":"                    MidiMessage::NoteOn(_, note, _velocity) => self.on_note(note as usize),","highlight_start":1,"highlight_end":92},{"text":"                    MidiMessage::NoteOff(_, note, _) => self.off_note(note.into()),","highlight_start":1,"highlight_end":84},{"text":"                    _ => (),","highlight_start":1,"highlight_end":29},{"text":"                }, // Wtf is an idiomatic rust?","highlight_start":1,"highlight_end":48},{"text":"                _ => (),","highlight_start":1,"highlight_end":25},{"text":"            };","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":"if let (Some(_t), Some(m)) = (timestamp, message) { match m {\n                MidiMessage::NoteOn(_, note, _velocity) => self.on_note(note as usize),\n                MidiMessage::NoteOff(_, note, _) => self.off_note(note.into()),\n                _ => (),\n            } }","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:118:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match (timestamp, message) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                (Some(_t), Some(m)) => match m {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    MidiMessage::NoteOn(_, note, _velocity) => self.on_note(note as usize),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    MidiMessage::NoteOff(_, note, _) => self.off_note(note.into()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                _ => (),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: you might want to preserve the comments from inside the `match`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::single_match)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10mif let (Some(_t), Some(m)) = (timestamp, message) { match m {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 MidiMessage::NoteOn(_, note, _velocity) => self.on_note(note as usize),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 MidiMessage::NoteOff(_, note, _) => self.off_note(note.into()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 _ => (),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~             } }\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"8 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 8 warnings emitted\u001b[0m\n\n"}
